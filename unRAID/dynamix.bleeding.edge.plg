<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name      "dynamix.bleeding.edge">
<!ENTITY author    "datagutt">
<!ENTITY version   "2025.06.28v2">
<!ENTITY pluginURL "https://raw.githubusercontent.com/datagutt/dynamix/main/unRAID/&name;.plg">
<!ENTITY source    "/boot/config/plugins/&name;/&name;">
<!ENTITY MD5       "0b0ec8d54bebe0c88d5b607a54be744a">
]>

<PLUGIN name="&name;" author="&author;" version="&version;" pluginURL="&pluginURL;" min="7.1.4">

<ALERT>
**WARNING - THIS IS PREPRODUCTION STUFF**

###There maybe bugs, use at your own risk.
</ALERT>

<CHANGES>
##&name;

###&version;
- Test release
</CHANGES>

<!--
Dynamix Bleeding Edge - Impatience is a virtue!
-->

<!-- README FILE -->
<FILE Name="/usr/local/emhttp/plugins/&name;/README.md">
<INLINE>
**Dynamix Bleeding Edge**

This package contains the most up to date developments for the Dynamix webGUI. For those people who can not wait and want to try the latest and greatest!
</INLINE>
</FILE>

<!-- Check disk space before installation -->
<FILE Run="/bin/bash" Method="install">
<INLINE>
<![CDATA[
# Check available disk space on /usr
echo -n "Checking disk space on /usr... "
FREE_SPACE=$(df -m /usr | awk 'NR==2 {print $4}')
if [ -z "$FREE_SPACE" ]; then
  echo "⚠️ Error: Unable to determine free space on /usr"
  exit 1
fi

if [ "$FREE_SPACE" -lt 100 ]; then
  echo "⚠️ Error: Insufficient disk space on /usr. Need at least 100MB free, only ${FREE_SPACE}MB available"
  exit 1
fi
echo "ok. (${FREE_SPACE}MB free)"

exit 0
]]>
</INLINE>
</FILE>

<!-- PRE-INSTALL SCRIPT -->
<FILE Run="/bin/bash">
<INLINE>
# Remove old 'source' packages
MD5=$(md5sum &source;.txz 2>/dev/null|grep -Po '^\S+')
if [[ $MD5 != &MD5; ]]; then
  rm -f &source;.txz
fi
</INLINE>
</FILE>

<!-- Backup existing dynamix files before installation -->
<FILE Run="/bin/bash" Method="install">
<INLINE>
<![CDATA[
echo "Backing up existing Dynamix webGUI files..."

# Create backup directory
BACKUP_DIR="/boot/config/plugins/&name;/backup"
mkdir -p "$BACKUP_DIR"

# Backup the entire dynamix plugin directory if it exists and we haven't backed it up yet
if [ -d "/usr/local/emhttp/plugins/dynamix" ] && [ ! -d "$BACKUP_DIR/dynamix" ]; then
  echo "Creating full backup of dynamix plugin..."
  cp -r "/usr/local/emhttp/plugins/dynamix" "$BACKUP_DIR/"
  echo "Backup created at: $BACKUP_DIR/dynamix"
fi

# Backup other webgui core files
WEBGUI_FILES=(
  "/usr/local/emhttp/webGui"
  "/usr/local/emhttp/login.php"
  "/usr/local/emhttp/logging.htm"
  "/usr/local/emhttp/update.htm"
  "/usr/local/emhttp/favicon.ico"
)

for FILE in "${WEBGUI_FILES[@]}"; do
  if [ -e "$FILE" ] && [ ! -e "$BACKUP_DIR/$(basename "$FILE")" ]; then
    cp -r "$FILE" "$BACKUP_DIR/"
    echo "Backed up: $(basename "$FILE")"
  fi
done

echo "Backup complete."
exit 0
]]>
</INLINE>
</FILE>

<!-- SOURCE PACKAGE -->
<FILE Name="&source;.txz" Run="upgradepkg --install-new --reinstall">
<URL>https://raw.githubusercontent.com/datagutt/dynamix/main/archive/&name;.txz</URL>
<MD5>&MD5;</MD5>
</FILE>

<!-- POST-INSTALL SCRIPT -->
<FILE Run="/bin/bash">
<INLINE>
echo ""
echo "-----------------------------------------------------------"
echo " Plugin &name; is installed."
echo " This plugin requires Dynamix webGui to operate"
echo " Version: &version;"
echo "-----------------------------------------------------------"
echo ""

# Update file permissions for security
echo "Setting appropriate file permissions..."
find /usr/local/emhttp/plugins/dynamix -type f \( -name "*.htm" -o -name "*.php" -o -name "*.js" -o -name "*.page" -o -name "*.css" -o -name "*.png" -o -name "*.gif" \) -exec chmod 644 {} \;
find /usr/local/emhttp/plugins/dynamix -type d -exec chmod 755 {} \;

echo "Installation complete. Please refresh your browser to see the updated interface."
</INLINE>
</FILE>

<!-- REMOVE SCRIPT -->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
<![CDATA[
echo "Removing Dynamix Bleeding Edge and restoring original files..."

BACKUP_DIR="/boot/config/plugins/&name;/backup"

# Stop any running services that might be using the files
killall -q nginx 2>/dev/null || true
killall -q php-fpm 2>/dev/null || true

# Restore backed up files
if [ -d "$BACKUP_DIR/dynamix" ]; then
  echo "Restoring original dynamix plugin..."
  rm -rf "/usr/local/emhttp/plugins/dynamix"
  cp -r "$BACKUP_DIR/dynamix" "/usr/local/emhttp/plugins/"
  echo "Dynamix plugin restored"
fi

# Restore other webgui files
WEBGUI_FILES=(
  "webGui"
  "login.php"
  "logging.htm"
  "update.htm"
  "favicon.ico"
)

for FILE in "${WEBGUI_FILES[@]}"; do
  if [ -e "$BACKUP_DIR/$FILE" ]; then
    rm -rf "/usr/local/emhttp/$FILE"
    cp -r "$BACKUP_DIR/$FILE" "/usr/local/emhttp/"
    echo "Restored: $FILE"
  fi
done

# Remove plugin related files
rm -rf /boot/config/plugins/&name;
rm -rf /usr/local/emhttp/plugins/&name;

# Restart web services
echo "Restarting web services..."
/etc/rc.d/rc.nginx restart 2>/dev/null || true

echo ""
echo "-----------------------------------------------------------"
echo " &name; has been removed and original files restored."
echo " Please refresh your browser."
echo "-----------------------------------------------------------"
echo ""

echo "Remove successful - PLEASE REBOOT YOUR SERVER to ensure all changes take effect"
]]>
</INLINE>
</FILE>

</PLUGIN>